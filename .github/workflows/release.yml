name: Releases

# test trigger. push
on: push

# Trigger on releases.
#on:
#  release:
#    types:
#      - published
#      - edited

permissions:
  contents: write
  packages: write

env:
  PROMU_VER: '0.13.0'
  EXPORTER_VER: ''
  VERSION_PARTS: ''

jobs:
  build:
    runs-on: self-hosted
    steps:
      -name : Checkout
        uses: actions/checkout@v3
        with:
          # fetch-depth required for gitversion in `Build` step
          fetch-depth: 0

      - name: Set up Golang
        uses: actions/setup-go@v3
        with:
          go-version: '^1.17.5'
      
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Install Build dependencies
        run: |
          dotnet tool install --global GitVersion.Tool --version 5.*
          Invoke-WebRequest -Uri https://github.com/prometheus/promu/releases/download/v$($Env:PROMU_VER)/promu-$($Env:PROMU_VER).windows-amd64.zip -OutFile promu-$($Env:PROMU_VER).windows-amd64.zip
          Expand-Archive -Path promu-$($Env:PROMU_VER).windows-amd64.zip -DestinationPath .
          Copy-Item -Path promu-$($Env:PROMU_VER).windows-amd64\promu.exe -Destination "$(go env GOPATH)\bin"

          # No binaries available so build from source
          go install github.com/josephspurrier/goversioninfo/cmd/goversioninfo@v1.4.0
          # GOPATH\bin dir must be added to PATH else the `promu` and `goversioninfo` commands won't be found
          echo "$(go env GOPATH)\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Build
        run: |
          $ErrorActionPreference = "Stop"

          $Env:EXPORTER_VER = dotnet-gitversion /output json /showvariable FullSemVer
          Set-Content -Path ${{ github.workspace }}/VERSION -Value $Env:EXPORTER_VER
          
          Get-Content ${{ github.workspace }}/VERSION    
                
          # Required to set the version in the installer using Make
          # $Env:VERSION_PARTS = ($Env:EXPORTER_VER -replace '^v?([0-9\.]+).*$','$1').Split(".")

          echo "Exporter version: $Env:EXPORTER_VER " 
          
          #TODO: fix minor version handling. Should be $Env:VERSION_PARTS[1]          
          goversioninfo.exe -ver-major $Env:VERSION_PARTS[0] -ver-minor 1 -ver-patch $Env:VERSION_PARTS[2] -product-version  $Env:EXPORTER_VER -platform-specific

          #TODO: fix crossbuild to generate various versions and msis
          #& 'C:\Program Files (x86)\GnuWin32\bin\make.exe' crossbuild
          # '+' symbols are invalid characters in image tags
          #(Get-Content -Path VERSION) -replace '\+', '_' | Set-Content -Path VERSION
          # & 'C:\Program Files (x86)\GnuWin32\bin\make.exe' build-all
          # GH requires all files to have different names, so add version/arch to differentiate
          #foreach($Arch in "amd64", "arm64","386") {
          #  Move-Item output\$Arch\windows_exporter.exe output\windows_exporter-$Version-$Arch.exe
          #}
          
          # Build and rename the exe         
          promu.exe build -v          
          Move-Item .\windows_exporter.exe .\windows_exporter-$Env:EXPORTER_VER.exe

          # Required to upload the exe to the release. Direct assignement was not working
          "exe_name=windows_exporter-$Env:EXPORTER_VER.exe" >> $env:GITHUB_ENV

      - name: Create Release #TODO: Update to an updated repo          
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: |
            ${{ github.event.head_commit.message }}            
            Generated ${{ env.exe_name }}       
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ env.exe_name }} 
          asset_name: ${{ env.exe_name }} 
          asset_content_type: application/vnd.microsoft.portable-executable


      